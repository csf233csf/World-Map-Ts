This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-03T08:44:22.916Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
assets/
  vue.svg
components/
  CommentApp.vue
  DrawApp.vue
  map.vue
App.vue
firebaseConfig.ts
main.ts
style.css
vite-env.d.ts

================================================================
Repository Files
================================================================

================
File: assets/vue.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="37.07" height="36" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 198"><path fill="#41B883" d="M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z"></path><path fill="#41B883" d="m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z"></path><path fill="#35495E" d="M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z"></path></svg>

================
File: components/CommentApp.vue
================
<template>
  <div class="comment-app">
    <div class="image-container">
      <img :src="imageUrl || ''" alt="Image" />
    </div>
    <div class="comment-container">
    <p class="stroked-text">Story</p>
    <div class="comments">
      <p>  {{ story }}</p>
    </div>
    <p class="stroked-text" style="margin-top: 20px;">Comment</p>
    <div class="comments">
      <div v-for="(comment, index) in comments" :key="index" class="comment">
        <p>{{ comment }}</p>
      </div>
    </div>
    <textarea v-model="newComment" placeholder="Add a comment..."></textarea>
    <button class="uploadbutton" @click="addComment">Post</button>
    <button @click="closeCommentApp" class="close-button">
      <img src="/images/close1.svg" alt="Close Icon" class="svg-icon" />
    </button>
  </div>
  </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import { ref as dbRef, push, onValue } from 'firebase/database';
import { database } from '../firebaseConfig';

const props = defineProps<{ xPos: number; yPos: number }>();
const emit = defineEmits(['close']);

const newComment = ref('');
const comments = ref<string[]>([]);
const imageUrl = ref<string | null>(null);
const story = ref<string | null>(null);

onMounted(() => {
  const imageRef = dbRef(database, `images_map/${props.xPos}_${props.yPos}`);
  onValue(imageRef, (snapshot) => {
    const data = snapshot.val();
    if (data) {
      if (data.url) {
        imageUrl.value = data.url;
      }
      if (data.story) {
        story.value = data.story;
      }
    }
  });

  const commentsRef = dbRef(database, `comment_map/${props.xPos}_${props.yPos}`);
  onValue(commentsRef, (snapshot) => {
    comments.value = [];
    snapshot.forEach((childSnapshot) => {
      const comment = childSnapshot.val();
      comments.value.push(comment);
    });
  });
});

const closeCommentApp = () => {
  emit('close');
};

const addComment = async () => {
  if (newComment.value.trim() !== '') {
    const commentsRef = dbRef(database, `comment_map/${props.xPos}_${props.yPos}`);
    await push(commentsRef, newComment.value.trim());
    newComment.value = '';
  }
};
</script>

<style scoped>
.comment-app {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgb(0, 0, 0);
  padding: 20px;
  border: 2px solid #00ffffa3;
  box-shadow: 0px 0px 10px rgb(0, 255, 255);
  z-index: 1000;
  /* width: 500px; */
  display: flex;
  flex-direction: row;
  
}
.image-container{

  background-image: url('/images/canvasbg.svg');
  background-size: contain;
  margin-right: 20px;
}
.image-container img {
  width: 400px;
}
.comment-container{
position: relative;
width:400px;

}
.story {
  margin-top: 10px;
  /* font-style: italic; */
  color:#00FFFF;  
}

.comments {
  height: 100px;
  overflow-y: scroll;
  margin-top: 10px;
  color:#00FFFF;
}

.comments::-webkit-scrollbar {
  width: 12px; /* 宽度 */
  background: transparent; /* 滚动条背景色 */
}

/* 滚动条滑块样式 */
.comments::-webkit-scrollbar-thumb {
  background-color: #00FFFF; /* 滑块颜色 */
  border-radius: 10px; /* 圆角 */
  border: 3px solid #000000; /* 滑块周围的边框 */
  min-height: 10px;
}

/* 滚动条滑块在悬停时的样式 */
.comments::-webkit-scrollbar-thumb:hover {
  background-color: #00CED1; /* 悬停时滑块颜色 */
}

/* 滚动条轨道样式 */
.comments::-webkit-scrollbar-track {
  background-color: #000000; /* 轨道颜色 */
  border-radius: 10px; /* 圆角 */
}

/* 滚动条轨道在悬停时的样式 */
.comments::-webkit-scrollbar-track:hover {
  background-color: #444; /* 悬停时轨道颜色 */
}

.comment {
  padding: 5px;
  border-bottom: 0.5px solid #FF00F5;
}

textarea {
  width: 100%;
  height: 60px;
  margin-top: 10px;
  margin-bottom: 10px;
  color:#00FFFF;
}

.button {
  margin-top: 10px;
}

.uploadbutton{
  width:100px;
  font-size: 15px;
  height:30px;
  border-radius: 20px;
  background-color: #00FFFF;
  color: #FF00C7;
  font-weight: 600;
  box-shadow: 0 0 8px rgb(0, 255, 255);
  /* margin-left: 200px; */
  left:300px;
  position: relative;

}

textarea{
  width: 100%;
  height:80px;
  padding: 5px;
  background-color: #000000;
  border: 2px solid #00ffff;
  border-radius: 8px;
  box-shadow: 0 0 8px rgb(0, 255, 255);
  margin-bottom: 10px;
}

.stroked-text {
  font-size: 18spx;
  color: #00FFFF;
  font-weight: 700;
  margin-bottom: 10px;
  text-shadow: 
    -1px -1px 0 #FF00F5,  
    1px -1px 0 #FF00F5,
    -1px 1px 0 #FF00F5,
    1px 1px 0 #FF00F5;
}

.close-button {
  position: absolute;
  top: 0px;
  right:0px;
  background: transparent;
  border: none;
  border-radius: 50%;
  width: 25px;
  height: 25px;
  cursor: pointer;
  font-size: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1010;
  transition: opacity 0.3s; /* 添加透明度变化的过渡效果 */
  opacity: 0.7;
}

.close-button:hover {
  opacity: 0.3;
}


.close-button img.svg-icon {
  margin-right: 8px;
  width: 15px;  /* 调整SVG图标宽度 */
  height: 15px; /* 调整SVG图标高度 */
  
}

</style>

================
File: components/DrawApp.vue
================
<template>
  <div class="background">
    <div class="draw-app">
      <button class="close-button" @click="closeDrawApp">
        <img src="/images/close1.svg" alt="Close Icon" class="svg-icon" />
      </button>
      <div class="canvascontainer">
        <p class="stroked-text">Draw your aliens</p>
        <canvas ref="canvas" :width="canvasSize" :height="canvasSize"></canvas>
        <div class="toolbar">
          <button @click="setEraser">
            <img src="/images/eraser1.svg" alt="Eraser" />
          </button>
          <button @click="setPen">
            <img src="/images/pencil.svg" style="padding:5px" alt="Pen" />
          </button>
          <button class="colorbutton" @click="changePenColor('#FF00F5')" style="background-color: #FF00F5;">
          </button>
          <button class="colorbutton" @click="changePenColor('#00FFFF')" style="background-color: #00FFFF;">
          </button>
          <button class="colorbutton" @click="changePenColor('#FFF72E')" style="background-color: #FFF72E;">
          </button>
          <button class="colorbutton" @click="changePenColor('#52FF00')" style="background-color: #52FF00;">
          </button>
        </div>
      </div>
      <div class="input">
        <p class="stroked-text">Story input</p>
        <textarea v-model="story" placeholder="Write your story here..."></textarea>
        <button class="uploadbutton" @click="saveDrawing" :disabled="isUploading">Post</button>
        <div v-if="isUploading" class="spinner"></div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" setup>
import { watch, ref, onMounted } from 'vue';
import { getStorage, ref as storageRef, uploadString, getDownloadURL } from 'firebase/storage';
import { getDatabase, ref as dbRef, set } from 'firebase/database';

const props = defineProps<{ xPos: number; yPos: number }>();
const canvas = ref<HTMLCanvasElement | null>(null);
const ctx = ref<CanvasRenderingContext2D | null>(null);
const penColor = ref('#FF00F5');
const pixelSize = ref(10);
const isUploading = ref(false);
const canvasSize = 500;
const story = ref('');
const emit = defineEmits(['close']);
let drawing = false;

const setEraser = () => {
  if (ctx.value) {
    ctx.value.globalCompositeOperation = 'destination-out';
  }
};

const setPen = () => {
  if (ctx.value) {
    ctx.value.globalCompositeOperation = 'source-over';
    ctx.value.strokeStyle = penColor.value;
  }
};

const startDrawing = (event: MouseEvent) => {
  if (ctx.value) {
    drawing = true;
    ctx.value.beginPath();
    ctx.value.moveTo(event.offsetX, event.offsetY);
    draw(event);
  }
};

const stopDrawing = () => {
  if (ctx.value) {
    drawing = false;
    ctx.value.closePath();
  }
};

const changePenColor = (color: string) => {
  penColor.value = color;
  if (ctx.value) {
    ctx.value.strokeStyle = penColor.value;
  }
};

const draw = (event: MouseEvent) => {
  if (!drawing) return;
  if (ctx.value) {
    ctx.value.lineTo(event.offsetX, event.offsetY);
    ctx.value.stroke();
  }
};

const saveDrawing = async () => {
  if (canvas.value) {
    isUploading.value = true;
    const dataUrl = canvas.value.toDataURL();
    const storage = getStorage();
    const imageRef = storageRef(storage, `${props.xPos}_${props.yPos}.png`);
    await uploadString(imageRef, dataUrl, 'data_url');
    const url = await getDownloadURL(imageRef);

    const db = getDatabase();
    const imageDbRef = dbRef(db, `images_map/${props.xPos}_${props.yPos}`);
    await set(imageDbRef, { xPos: props.xPos, yPos: props.yPos, url, story: story.value });
    closeDrawApp();
    alert('Drawing saved!');
    isUploading.value = false;
  }
};

const clearCanvas = () => {
  if (ctx.value && canvas.value) {
    ctx.value.clearRect(0, 0, canvas.value.width, canvas.value.height);
  }
};

const closeDrawApp = () => {
  clearCanvas();
  ctx.value = null;
  canvas.value = null;
  isUploading.value = false;
  emit('close');
};

onMounted(() => {
  if (canvas.value) {
    ctx.value = canvas.value.getContext('2d');
    ctx.value!.strokeStyle = penColor.value;
    ctx.value!.lineWidth = pixelSize.value;
    canvas.value.addEventListener('mousedown', startDrawing);
    canvas.value.addEventListener('mouseup', stopDrawing);
    canvas.value.addEventListener('mouseleave', stopDrawing);
    canvas.value.addEventListener('mousemove', draw);
  }
});

watch(penColor, (newColor) => {
  if (ctx.value) {
    ctx.value.strokeStyle = newColor;
  }
});

watch(pixelSize, (newSize) => {
  if (ctx.value) {
    ctx.value.lineWidth = newSize;
  }
});
</script>


<style scoped>
.background {
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.draw-app {
  position: relative;
  height: 650px; 
  width: 900px;
  padding: 10px;
  border: 2px solid #00ffffa3;
  box-shadow: 0px 0px 10px rgb(0, 255, 255);
  /* box-shadow: 0 0 8px rgb(0, 255, 255); */
  z-index: 1000;
  border-radius: 10px;;
  /* filter: blur(1px); */
  background-color: black;
  /* background-image: url('/images/canvascontain.svg'); */
  background-size: contain;
  display: flex;
  flex-direction: row;
}
.canvascontainer{
  margin: 30px;
  
}
canvas {
  /* border: 1px solid black; */
  background-image: url('/images/canvasbg.svg');
  background-size: contain;
}

.toolbar {
  display: flex;
  position: relative;
  align-items: center;
}

.spinner {
  border: 4px solid rgba(0, 0, 0, 0.1);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  border-left-color: #09f;
  animation: spin 1s ease infinite;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.eraserbutton {
  top: 20px;
  right: 0;
  height: 60px;
  width: 60px;
  margin-right: 3%;
  border-radius: 50%;
  flex-shrink: 0;
  min-width: 32px;
  background-color: #FFF72E;
  font-size: 9px;
  letter-spacing: 0.5px;
  color: black;
  min-height: 60px;
  z-index: 1020;
}

button {
  height:40px;
  width: 40px;
  border-radius: 50%;
  margin-left: 30px;
  /* background-color: #FFF72E; */
}

.colorbutton{
  height:30px;
  width: 30px;
  border-radius: 50%;
  filter: blur(1px);
}

button img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  filter: blur(0.5px);
}


.stroked-text {
  font-size: 18spx;
  color: #00FFFF;
  font-weight: 700;
  margin-bottom: 10px;
  text-shadow: 
    -1px -1px 0 #FF00F5,  
    1px -1px 0 #FF00F5,
    -1px 1px 0 #FF00F5,
    1px 1px 0 #FF00F5;
}


.input {
  height: 100%;
  width: 300px;
  background-color:transparent;
  display: flex;
  flex-direction: column;
  /* align-items:end; */
  justify-content: end;
  gap: 10px;
  padding-bottom: 30px;
}


textarea{
  width: 100%;
  height:100px;
  padding: 5px;
  background-color: #000000;
  border: 2px solid #00ffff;
  border-radius: 8px;
  box-shadow: 0 0 8px rgb(0, 255, 255);
  color: rgb(9, 140, 255);
  margin-bottom: 10px;
}

.uploadbutton{
  width:100px;
  font-size: 15px;
  height:30px;
  border-radius: 20px;
  background-color: #00FFFF;
  color: #FF00C7;
  font-weight: 600;
  box-shadow: 0 0 8px rgb(0, 255, 255);
  margin-left: 200px;
}

.close-button {
  position: absolute;
  top: 6px;
  right:6px;
  background: transparent;
  border: none;
  border-radius: 50%;
  width: 25px;
  height: 25px;
  cursor: pointer;
  font-size: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1010;
  transition: opacity 0.3s; /* 添加透明度变化的过渡效果 */
  opacity: 0.7;
}

.close-button:hover {
  opacity: 0.3;
}


.close-button img.svg-icon {
  margin-right: 8px;
  width: 15px;  /* 调整SVG图标宽度 */
  height: 15px; /* 调整SVG图标高度 */
  
}

</style>

================
File: components/map.vue
================
<template>
  <div>
    <div v-if="showDrawApp">
      <DrawApp :xPos="xPos" :yPos="yPos" @close="closeDrawApp" />
      <div class="overlay"></div>
    </div>
    <div class="map-container" @click.self="handleMapClick">
      <div class='commentapp' v-if="showCommentApp && selectedXPos !== null && selectedYPos !== null">
        <CommentApp :xPos="selectedXPos" :yPos="selectedYPos" @close="closeCommentApp" />
        <div class="overlay"></div>
      </div>
      <div v-for="(img, index) in images" :key="index" class="image-button"
        :style="{ left: img.xPos + 'px', top: img.yPos + 'px' }">
        <button :style="{ backgroundColor: img.color }" @click.stop="openCommentApp(img.xPos, img.yPos)"
          @mouseover="showImage(img.url, $event)"
          @mouseleave="hideImage">
        </button>
      </div>
      <div v-if="hoveredImage" class="hover-image" :style="{ top: hoverY + 'px', left: hoverX + 'px' }">
        <v-img :src="hoveredImage" :width="200" :height="200" cover />
      </div>
    </div>
  </div>
</template>

<script lang="ts" setup>
import { ref, onMounted, inject } from 'vue';
import { database } from '../firebaseConfig';
import { ref as dbRef, onValue } from 'firebase/database';
import DrawApp from './DrawApp.vue';
import CommentApp from './CommentApp.vue';
import { gsap } from 'gsap';

const xPos = ref(0);
const yPos = ref(0);
const showDrawApp = ref(false);
const showCommentApp = ref(false);
const selectedXPos = ref<number | null>(null);
const selectedYPos = ref<number | null>(null);
const hoveredImage = ref<string | null>(null);
const hoverX = ref(0);
const hoverY = ref(0);
const images = ref<{ xPos: number; yPos: number; url: string; color: string }[]>([]);
const colors = ['#FF9900', '#FF00C7', '#52FF00', '#FFF72E', '#00FFFF', '#7000FF'];
const loading = ref(true);


function getRandomColor() {
  const randomIndex = Math.floor(Math.random() * colors.length);
  return colors[randomIndex];
}

const closeDrawApp = () => {
  showDrawApp.value = false;
};
const inject_inst = inject('changea_maptitle') as () => void


const closeCommentApp = () => {
  showCommentApp.value = false;
  selectedXPos.value = null;
  selectedYPos.value = null;
};

const handleMapClick = (event: MouseEvent) => {
  xPos.value = event.offsetX;
  yPos.value = event.offsetY;
  showDrawApp.value = true;
};

const openCommentApp = (x: number, y: number) => {
  selectedXPos.value = x;
  selectedYPos.value = y;
  showCommentApp.value = true;
};

const showImage = (url: string, event: MouseEvent) => {
  hoveredImage.value = url;
  const buttonRect = (event.target as HTMLElement).getBoundingClientRect();
  hoverX.value = buttonRect.left + window.scrollX - 100; // Add window scroll position to make it accurate
  hoverY.value = buttonRect.top + window.scrollY - 70; // Adjust the value based on the image height
};

const hideImage = () => {
  hoveredImage.value = null;
};

onMounted(() => {
  // inject_inst();
  const imagesRef = dbRef(database, 'images_map');
  onValue(imagesRef, (snapshot) => {
    images.value = [];
    const promises: Promise<void>[] = [];

    snapshot.forEach((childSnapshot) => {
      const data = childSnapshot.val();
      const color = getRandomColor();
      data.color = color;
      images.value.push(data);

      // Preload image
      const img = new Image();
      img.src = data.url;
      promises.push(new Promise<void>((resolve) => {
        img.onload = () => resolve();
      }));
    });

    Promise.all(promises).then(() => {
      loading.value = false; // Mark loading as complete once all images are preloaded
      // GSAP fade-in effect
      gsap.fromTo('.map-container', { opacity: 0 }, { opacity: 1, duration: 0.4 });
    });
  });
});
</script>

<style scoped>
.map-container {
  width: 80vw;
  height: 80vh;
  position: relative;
  margin-left:10vw;
  margin-right:10vw;
  top: 10vh;
  bottom: 0;
  left: 0;
  right: 0;
  background-image: url('/map.svg');
  background-size: cover;
  background-position: center;
  opacity: 0; /* Initial opacity for fade-in effect */
}

.image-button {
  position: absolute;
  z-index: 6;
}
.image-button button {
  position: absolute;
  padding: 0px;
  border: 0;
  cursor: pointer;
  width: 15px; /* 设置按钮宽度 */
  height: 15px; /* 设置按钮高度 */
  border-radius: 50%; /* 将按钮形状设置为圆形 */
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4); /* 添加阴影 */
  transition: transform 0.2s, box-shadow 0.2s; /* 添加过渡效果 */
  z-index: 6;
  /* animation: blink 1s infinite; */
}


.image-button button:hover {
  cursor: url("/images/hover.png"), auto; 
}



@keyframes blink {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
}

.hover-image {
  position: absolute;
  z-index: 7;
  border: 1px solid #ccc;
  background-color: rgb(0, 0, 0);
  padding: 5px;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
  cursor: not-allowed;
}

.wrapper {
  position: relative;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 999;
  display: flex;
  justify-content: center;
  align-items: center;
}

.spinner {
  width: 50px;
  height: 50px;
  border: 4px solid #f3f3f3; /* 灰色边框 */
  border-top: 4px solid #3498db; /* 蓝色边框 */
  border-radius: 50%;
  animation: spin 1s linear infinite; /* 旋转动画 */
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.commentapp {
  z-index: 10000000;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s; /* 过渡效果 */
}

.fade-enter,
.fade-leave-to {
  opacity: 0; /* 初始透明度为0 */
}
</style>

================
File: App.vue
================
<script setup lang="ts">
import Map from './components/map.vue';

</script>

<template>
  <Map></Map>
</template>


<style scoped>
.body {
  font-family: "HelveticaNeue", sans-serif !important;
}

.app-container {
  width: 100vw;
  height: 100vh;
  padding: 0;
  display: flex;
  overflow-x: hidden;
  cursor: url("/images/censor.png"), auto;
}

.three-container {
  width: 20%;
  height: 30%;
  position: absolute;
  top: 10%;
  left: 5%;
  z-index: 99;
  background: transparent;
  overflow: hidden;
  pointer-events: none;
}

.nav-bar {
  background-color: transparent;
  height: 100%;
  color: white;
  display: flex;
  position: fixed;
  left: 0%;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 100;
  padding: 10px;
}

.nav-bar ul {
  list-style-type: none;
  padding: 0;
  cursor: url("/images/hover.png"), auto;
}

.nav-bar li {
  padding: 10px;
  margin-bottom: 60px;
  /* font-family: 'Jeju', sans-serif; */
  font-size: 1.5rem;
}

.nav-bar li:hover {
  font-weight: bold;
}

.nav-bar li.active {
  font-weight: bold;
  color: var(--link-color);
}

.Title {
  position: fixed;
  top: 0px;
  width: 100%;
  color: var(--title-color);
  z-index: 99;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  margin: 20px;
  margin-left: 0px;
  pointer-events: none;

}

.titleWrapper {
  width: 60vw;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: space-between;
}

.Title h1 {
  max-width: 440px;
  line-height: 1.3;
  font-size: 40px;
  
}

.Title p {
  width: 400px;
  margin-top: 10px;
}

.sections {
  display: flex;
  width: 100vw;
  height: 100vh;
  position: absolute;
  overflow-x: auto;
}

.section {
  width: 100vw;
  height: 100vh;
  flex-shrink: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 3em;
  color: white;
  position: relative;
  overflow: hidden;
  z-index: 98;
}

.blur {
  position: absolute;
  width: 100vw;
  height: 100vh;
  backdrop-filter: blur(0px);
  z-index: 99;
  transition: backdrop-filter 1s ease;
  pointer-events: none;
}

.gradient-div {
  width: 100%;
  height: 20%;
  position: fixed;
  bottom: 0;
  left: 0;
  background: linear-gradient(to top, var(--start-color), transparent);
  z-index: 99;
}

.gradient-div1 {
  width: 15%;
  height: 100%;
  position: fixed;
  bottom: 0;
  left: 0;
  background: linear-gradient(to right, var(--end-color), transparent);
  z-index: 99;
}

.text-div {
  width: 100px;
  height: 20%;
  position: fixed;
  top: 0;
  right: 10vw;
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2em;
}

.jump-button {
  position: absolute;
  left: 50%;
  bottom: 6%;
  transform: translateX(-50%);
  z-index: 1001;
  opacity: 80%;
  color: #ffffff;
  cursor: url("/images/hover.png"), auto; 
}

.sections::-webkit-scrollbar {
  display: none;
}

.sections {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

@font-face {
  font-family: "HelveticaNeue";
  src: url("/fonts/HelveticaNeue.ttc") format("ttc");
  font-weight: normal;
  font-style: normal;
}

.spaced-text {
  display: inline-block;
  padding-left: 100px;
}

.loading-screen {
  position: fixed;
  width: 100vw;
  height: 100vh;
  background-color: black;
  top: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 100000;
  /* filter: blur(10px); */
  backdrop-filter: blur(10px);
}

.loading-video {

  width: 30%;
  height: 30%;
  object-fit: cover;
  z-index: 1;
}

.spinner {
  color: #00ffff;
  z-index: 100001;
  font-size: 30px;
  position: relative;
  margin-bottom: 30px;
  /* font-family: 'Jeju', sans-serif; */
}
</style>

================
File: firebaseConfig.ts
================
import { initializeApp } from 'firebase/app';
import { getStorage } from 'firebase/storage';
import { getDatabase } from 'firebase/database';

const firebaseConfig = {
    apiKey: "AIzaSyDT6ODJ0Tcr3EaojHrfsrpXNrUnR2qQi48",
    authDomain: "ufo-project-bcfcc.firebaseapp.com",
    projectId: "ufo-project-bcfcc",
    storageBucket: "ufo-project-bcfcc.appspot.com",
    messagingSenderId: "871826136173",
    appId: "1:871826136173:web:7dd11cf54cb35318ce7364",
    measurementId: "G-3XJ4HJ7WG6"
};

const app = initializeApp(firebaseConfig);
const storage = getStorage(app);
const database = getDatabase(app);

export { app, storage, database };

================
File: main.ts
================
import { createApp } from 'vue'
import './style.css'
import App from './App.vue'

createApp(App).mount('#app')

================
File: style.css
================
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: vite-env.d.ts
================
/// <reference types="vite/client" />
